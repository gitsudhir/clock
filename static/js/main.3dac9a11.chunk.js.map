{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","Date","_useState2","Object","slicedToArray","date","setDate","_useState3","getSeconds","_useState4","sec","useEffect","interval","setInterval","document","getElementById","setAttribute","getHours","getMinutes","clearInterval","react_default","a","createElement","Fragment","toString","height","width","id","cx","cy","r","stroke","strokeWidth","fill","x1","y1","x2","y2","transform","style","opacity","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2ICmDzBC,eAhDH,WAAM,IAAAC,EAEQC,mBAAS,IAAIC,MAFrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAETM,EAFSH,EAAA,GAEHI,EAFGJ,EAAA,GAAAK,EAGMP,mBAASK,EAAKG,cAHpBC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGTG,EAHSD,EAAA,GAAAA,EAAA,GAuBhB,OAnBAE,oBAAU,WAGR,IAAIC,EAAWC,YAAY,WACzBP,EAAQ,IAAIL,OACX,KAWH,OAPaa,SAASC,eAAe,QAC9BC,aAAa,YAAa,WAAa,GAAK,IAAO,IAAMX,EAAKY,YAAc,GAAKZ,EAAKY,WAAa,GAAKZ,EAAKY,YAAcZ,EAAKa,eAAiB,aAC5IJ,SAASC,eAAe,OAC9BC,aAAa,YAAa,WAAa,GAAM,EAAIX,EAAKa,cAAiB,aACjEJ,SAASC,eAAe,OAC9BC,aAAa,YAAa,WAAa,EAAIX,EAAKG,aAAe,IAAM,aAEpE,kBAAMW,cAAcP,KAC1B,CAACF,EAAKL,IAGPe,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAKjB,EAAKmB,YAUVJ,EAAAC,EAAAC,cAAA,OAAKG,OAAO,MAAMC,MAAM,MAAMC,GAAG,SAC/BP,EAAAC,EAAAC,cAAA,UAAQM,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAMC,OAAO,QAAQC,YAAa,EAAwBC,KAAK,SAC3Fb,EAAAC,EAAAC,cAAA,QAAMK,GAAG,OAAOO,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,UAAU,sBAAsBC,MAAO,CAAEN,KAAM,OAAQF,OAAQ,OAAQC,YAAa,KAAMQ,QAAS,SACvJpB,EAAAC,EAAAC,cAAA,QAAMK,GAAG,MAAMO,GAAG,MAAMC,GAAG,MAAMC,GAAG,KAAKC,GAAG,MAAMC,UAAU,sBAAsBC,MAAO,CAAEN,KAAM,OAAQF,OAAQ,MAAOC,YAAa,IAAKQ,QAAS,SACnJpB,EAAAC,EAAAC,cAAA,QAAMK,GAAG,MAAMO,GAAG,MAAMC,GAAG,MAAMC,GAAG,KAAKC,GAAG,MAAMC,UAAU,sBAAsBC,MAAO,CAAEN,KAAM,OAAQF,OAAQ,OAAQC,YAAa,IAAKQ,QAAS,SACpJpB,EAAAC,EAAAC,cAAA,UAAQM,GAAG,MAAMC,GAAG,MAAMC,EAAE,KAAKE,YAAa,EAAwBC,KAAK,cC/B/DQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3dac9a11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst App = () => {\n\n  const [date, setDate] = useState(new Date());\n  const [sec, setSec] = useState(date.getSeconds())\n  useEffect(() => {\n    //  angle h = 0.5 *(60*h + m)\n    // angle m = 6 * m \n    let interval = setInterval(() => {\n      setDate(new Date())\n    }, 1000);\n\n\n    (function start() {\n      var hour = document.getElementById(\"hour\")\n      hour.setAttribute(\"transform\", \"rotate(\" + (90 + 0.5 * (60 * (date.getHours() >= 12 ? date.getHours() - 12 : date.getHours()) + date.getMinutes())) + \",200,150)\")\n      var min = document.getElementById(\"min\")\n      min.setAttribute(\"transform\", \"rotate(\" + (90 + (6 * date.getMinutes())) + \",200,150)\")\n      var sec = document.getElementById(\"sec\")\n      sec.setAttribute(\"transform\", \"rotate(\" + (6 * date.getSeconds() + 90) + \",200,150)\")\n    })();\n    return () => clearInterval(interval)\n  }, [sec, date]);\n\n  return (\n    <> \n      <h3>{date.toString()}</h3>\n      {/*\n      <p>Hour : {date.getHours()}</p>\n      <p>minutes : {date.getMinutes()}</p>\n      <p>second : {date.getSeconds()}</p>\n      <p>angle h:{0.5 * (60 * (date.getHours() >= 12 ? date.getHours() - 12 : date.getHours()) + date.getMinutes())} </p>\n      <p>angle min :{6 * date.getMinutes()} </p>\n      <p>angle sec :{6 * date.getSeconds()} </p>\n\n      */}\n      <svg height=\"500\" width=\"500\" id=\"clock\">\n        <circle cx=\"200\" cy=\"150\" r=\"120\" stroke=\"black\" strokeWidth={1 || date.getSeconds()} fill=\"#fff\" />\n        <line id=\"hour\" x1=\"200\" y1=\"150\" x2=\"120\" y2=\"150\" transform=\"rotate(100,200,150)\" style={{ fill: 'blue', stroke: 'pink', strokeWidth: '10', opacity: '0.9' }} />\n        <line id=\"min\" x1=\"200\" y1=\"150\" x2=\"88\" y2=\"150\" transform=\"rotate(100,200,150)\" style={{ fill: 'blue', stroke: 'red', strokeWidth: '8', opacity: '0.7' }} />\n        <line id=\"sec\" x1=\"200\" y1=\"150\" x2=\"78\" y2=\"150\" transform=\"rotate(100,200,150)\" style={{ fill: 'blue', stroke: 'blue', strokeWidth: '5', opacity: '0.5' }} />\n        <circle cx=\"200\" cy=\"150\" r=\"10\" strokeWidth={1 || date.getSeconds()} fill=\"black\" />\n\n      </svg>\n\n    </>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}